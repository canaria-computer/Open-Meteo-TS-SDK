// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ClimateDaily } from '../../com/openmeteo/climate-daily.js';
import { ClimateModel } from '../../com/openmeteo/climate-model.js';


export class ClimateApi {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ClimateApi {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsClimateApi(bb:flatbuffers.ByteBuffer, obj?:ClimateApi):ClimateApi {
  return (obj || new ClimateApi()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsClimateApi(bb:flatbuffers.ByteBuffer, obj?:ClimateApi):ClimateApi {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ClimateApi()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

latitude():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

longitude():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

elevation():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

model():ClimateModel {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ClimateModel.best_match;
}

generationtimeMs():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

daily(obj?:ClimateDaily):ClimateDaily|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new ClimateDaily()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startClimateApi(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addLatitude(builder:flatbuffers.Builder, latitude:number) {
  builder.addFieldFloat32(0, latitude, 0.0);
}

static addLongitude(builder:flatbuffers.Builder, longitude:number) {
  builder.addFieldFloat32(1, longitude, 0.0);
}

static addElevation(builder:flatbuffers.Builder, elevation:number) {
  builder.addFieldFloat32(2, elevation, 0.0);
}

static addModel(builder:flatbuffers.Builder, model:ClimateModel) {
  builder.addFieldInt8(3, model, ClimateModel.best_match);
}

static addGenerationtimeMs(builder:flatbuffers.Builder, generationtimeMs:number) {
  builder.addFieldFloat32(4, generationtimeMs, 0.0);
}

static addDaily(builder:flatbuffers.Builder, dailyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, dailyOffset, 0);
}

static endClimateApi(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishClimateApiBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedClimateApiBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

}
