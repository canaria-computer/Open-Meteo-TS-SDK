// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class TimeRange {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TimeRange {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

start():bigint {
  return this.bb!.readInt64(this.bb_pos);
}

end():bigint {
  return this.bb!.readInt64(this.bb_pos + 8);
}

interval():number {
  return this.bb!.readInt32(this.bb_pos + 16);
}

static sizeOf():number {
  return 24;
}

static createTimeRange(builder:flatbuffers.Builder, start: bigint, end: bigint, interval: number):flatbuffers.Offset {
  builder.prep(8, 24);
  builder.pad(4);
  builder.writeInt32(interval);
  builder.writeInt64(BigInt(end ?? 0));
  builder.writeInt64(BigInt(start ?? 0));
  return builder.offset();
}

}
