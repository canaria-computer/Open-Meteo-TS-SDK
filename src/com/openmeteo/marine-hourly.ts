// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { TimeRange } from '../../com/openmeteo/time-range.js';
import { ValuesAndUnit } from '../../com/openmeteo/values-and-unit.js';


export class MarineHourly {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MarineHourly {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMarineHourly(bb:flatbuffers.ByteBuffer, obj?:MarineHourly):MarineHourly {
  return (obj || new MarineHourly()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMarineHourly(bb:flatbuffers.ByteBuffer, obj?:MarineHourly):MarineHourly {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MarineHourly()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

time(obj?:TimeRange):TimeRange|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new TimeRange()).__init(this.bb_pos + offset, this.bb!) : null;
}

waveHeight(obj?:ValuesAndUnit):ValuesAndUnit|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new ValuesAndUnit()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

wavePeriod(obj?:ValuesAndUnit):ValuesAndUnit|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new ValuesAndUnit()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

waveDirection(obj?:ValuesAndUnit):ValuesAndUnit|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new ValuesAndUnit()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

windWaveHeight(obj?:ValuesAndUnit):ValuesAndUnit|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new ValuesAndUnit()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

windWavePeriod(obj?:ValuesAndUnit):ValuesAndUnit|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new ValuesAndUnit()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

windWavePeakPeriod(obj?:ValuesAndUnit):ValuesAndUnit|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new ValuesAndUnit()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

windWaveDirection(obj?:ValuesAndUnit):ValuesAndUnit|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new ValuesAndUnit()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

swellWaveHeight(obj?:ValuesAndUnit):ValuesAndUnit|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? (obj || new ValuesAndUnit()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

swellWavePeriod(obj?:ValuesAndUnit):ValuesAndUnit|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? (obj || new ValuesAndUnit()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

swellWavePeakPeriod(obj?:ValuesAndUnit):ValuesAndUnit|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? (obj || new ValuesAndUnit()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

swellWaveDirection(obj?:ValuesAndUnit):ValuesAndUnit|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? (obj || new ValuesAndUnit()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startMarineHourly(builder:flatbuffers.Builder) {
  builder.startObject(12);
}

static addTime(builder:flatbuffers.Builder, timeOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, timeOffset, 0);
}

static addWaveHeight(builder:flatbuffers.Builder, waveHeightOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, waveHeightOffset, 0);
}

static addWavePeriod(builder:flatbuffers.Builder, wavePeriodOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, wavePeriodOffset, 0);
}

static addWaveDirection(builder:flatbuffers.Builder, waveDirectionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, waveDirectionOffset, 0);
}

static addWindWaveHeight(builder:flatbuffers.Builder, windWaveHeightOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, windWaveHeightOffset, 0);
}

static addWindWavePeriod(builder:flatbuffers.Builder, windWavePeriodOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, windWavePeriodOffset, 0);
}

static addWindWavePeakPeriod(builder:flatbuffers.Builder, windWavePeakPeriodOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, windWavePeakPeriodOffset, 0);
}

static addWindWaveDirection(builder:flatbuffers.Builder, windWaveDirectionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, windWaveDirectionOffset, 0);
}

static addSwellWaveHeight(builder:flatbuffers.Builder, swellWaveHeightOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, swellWaveHeightOffset, 0);
}

static addSwellWavePeriod(builder:flatbuffers.Builder, swellWavePeriodOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, swellWavePeriodOffset, 0);
}

static addSwellWavePeakPeriod(builder:flatbuffers.Builder, swellWavePeakPeriodOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, swellWavePeakPeriodOffset, 0);
}

static addSwellWaveDirection(builder:flatbuffers.Builder, swellWaveDirectionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, swellWaveDirectionOffset, 0);
}

static endMarineHourly(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // time
  return offset;
}

}
