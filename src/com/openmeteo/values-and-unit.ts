// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { SiUnit } from '../../com/openmeteo/si-unit.js';


export class ValuesAndUnit {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ValuesAndUnit {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsValuesAndUnit(bb:flatbuffers.ByteBuffer, obj?:ValuesAndUnit):ValuesAndUnit {
  return (obj || new ValuesAndUnit()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsValuesAndUnit(bb:flatbuffers.ByteBuffer, obj?:ValuesAndUnit):ValuesAndUnit {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ValuesAndUnit()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

values(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

valuesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

valuesArray():Float32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

unit():SiUnit {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SiUnit.undefined;
}

static startValuesAndUnit(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addValues(builder:flatbuffers.Builder, valuesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, valuesOffset, 0);
}

static createValuesVector(builder:flatbuffers.Builder, data:number[]|Float32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createValuesVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createValuesVector(builder:flatbuffers.Builder, data:number[]|Float32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]!);
  }
  return builder.endVector();
}

static startValuesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addUnit(builder:flatbuffers.Builder, unit:SiUnit) {
  builder.addFieldInt8(1, unit, SiUnit.undefined);
}

static endValuesAndUnit(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // values
  return offset;
}

static createValuesAndUnit(builder:flatbuffers.Builder, valuesOffset:flatbuffers.Offset, unit:SiUnit):flatbuffers.Offset {
  ValuesAndUnit.startValuesAndUnit(builder);
  ValuesAndUnit.addValues(builder, valuesOffset);
  ValuesAndUnit.addUnit(builder, unit);
  return ValuesAndUnit.endValuesAndUnit(builder);
}
}
