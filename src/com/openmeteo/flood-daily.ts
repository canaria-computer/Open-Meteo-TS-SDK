// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { TimeRange } from '../../com/openmeteo/time-range';
import { ValuesAndUnit } from '../../com/openmeteo/values-and-unit';
import { ValuesUnitAndMember } from '../../com/openmeteo/values-unit-and-member';


export class FloodDaily {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FloodDaily {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFloodDaily(bb:flatbuffers.ByteBuffer, obj?:FloodDaily):FloodDaily {
  return (obj || new FloodDaily()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFloodDaily(bb:flatbuffers.ByteBuffer, obj?:FloodDaily):FloodDaily {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FloodDaily()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

time(obj?:TimeRange):TimeRange|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new TimeRange()).__init(this.bb_pos + offset, this.bb!) : null;
}

riverDischarge(obj?:ValuesUnitAndMember):ValuesUnitAndMember|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new ValuesUnitAndMember()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

riverDischargeMean(obj?:ValuesAndUnit):ValuesAndUnit|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new ValuesAndUnit()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

riverDischargeMin(obj?:ValuesAndUnit):ValuesAndUnit|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new ValuesAndUnit()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

riverDischargeMax(obj?:ValuesAndUnit):ValuesAndUnit|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new ValuesAndUnit()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

riverDischargeMedian(obj?:ValuesAndUnit):ValuesAndUnit|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new ValuesAndUnit()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

riverDischargeP25(obj?:ValuesAndUnit):ValuesAndUnit|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new ValuesAndUnit()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

riverDischargeP75(obj?:ValuesAndUnit):ValuesAndUnit|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new ValuesAndUnit()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startFloodDaily(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addTime(builder:flatbuffers.Builder, timeOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, timeOffset, 0);
}

static addRiverDischarge(builder:flatbuffers.Builder, riverDischargeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, riverDischargeOffset, 0);
}

static addRiverDischargeMean(builder:flatbuffers.Builder, riverDischargeMeanOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, riverDischargeMeanOffset, 0);
}

static addRiverDischargeMin(builder:flatbuffers.Builder, riverDischargeMinOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, riverDischargeMinOffset, 0);
}

static addRiverDischargeMax(builder:flatbuffers.Builder, riverDischargeMaxOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, riverDischargeMaxOffset, 0);
}

static addRiverDischargeMedian(builder:flatbuffers.Builder, riverDischargeMedianOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, riverDischargeMedianOffset, 0);
}

static addRiverDischargeP25(builder:flatbuffers.Builder, riverDischargeP25Offset:flatbuffers.Offset) {
  builder.addFieldOffset(6, riverDischargeP25Offset, 0);
}

static addRiverDischargeP75(builder:flatbuffers.Builder, riverDischargeP75Offset:flatbuffers.Offset) {
  builder.addFieldOffset(7, riverDischargeP75Offset, 0);
}

static endFloodDaily(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // time
  return offset;
}

}
